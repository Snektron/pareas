import "tree"
import "datatypes"
import "instr_count"
import "../../../lib/github.com/diku-dk/sorts/radix_sort"

type Instr = {
    instr: u32,
    rd: i64,
    rs1: i64,
    rs2: i64,
    jt: u32
}

let EMPTY_INSTR : Instr = {
    instr = 0,
    rd = 0,
    rs1 = 0,
    rs2 = 0,
    jt = 0
}

let PARENT_IDX_PER_NODE : i64 = 3

let INSTR_TABLE : [][][]u32 = [
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Invalid
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Statement list
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Empty statement
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_01000_00010_000_00010_0110011,   0b0000000_01000_00010_000_00010_0110011,    0b0000000_01000_00010_000_00010_0110011,    0b0000000_01000_00010_000_00010_0110011,    0b0000000_01000_00010_000_00010_0110011,    0b0000000_01000_00010_000_00010_0110011],
        [0b1111111_11100_00010_010_00001_0000011,   0b1111111_11100_00010_010_00001_0000011,    0b1111111_11100_00010_010_00001_0000011,    0b1111111_11100_00010_010_00001_0000011,    0b1111111_11100_00010_010_00001_0000011,    0b1111111_11100_00010_010_00001_0000011],
        [0b1111111_11000_01000_010_01000_0000011,   0b1111111_11000_01000_010_01000_0000011,    0b1111111_11000_01000_010_01000_0000011,    0b1111111_11000_01000_010_01000_0000011,    0b1111111_11000_01000_010_01000_0000011,    0b1111111_11000_01000_010_01000_0000011],
        [0b0000000_00000_00001_000_00000_1100111,   0b0000000_00000_00001_000_00000_1100111,    0b0000000_00000_00001_000_00000_1100111,    0b0000000_00000_00001_000_00000_1100111,    0b0000000_00000_00001_000_00000_1100111,    0b0000000_00000_00001_000_00000_1100111]
    ], --Func decl
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_010_00000_0100011,    0b0000000_00000_00000_010_00000_0100111],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Func arg
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Func arg list
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Expr stat
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1100011,   0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --If stat
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1100011,   0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011],
        [0b0000000_00000_00000_000_00000_1100111,   0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --If else stat
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1100011,   0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011,    0b0000000_00000_00000_000_00000_1100011],
        [0b0000000_00000_00000_000_00000_1100111,   0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --While stat
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00001_1100111,   0b0000000_00000_00000_000_00001_1100111,    0b0000000_00000_00000_000_00001_1100111,    0b0000000_00000_00000_000_00001_1100111,    0b0000000_00000_00000_000_00001_1100111,    0b0000000_00000_00000_000_00001_1100111],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_01010_000_00000_0110011,    0b0010000_01010_01010_000_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Func call expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_0110011,    0b0010000_00000_00000_000_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Func call arg
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00010_111_00010_0010011,   0b0000000_00000_00010_111_00010_0010011,    0b0000000_00000_00010_111_00010_0010011,    0b0000000_00000_00010_111_00010_0010011,    0b0000000_00000_00010_111_00010_0010011,    0b0000000_00000_00010_111_00010_0010011],
        [0b0000000_00000_00010_110_00010_0010011,   0b0000000_00000_00010_110_00010_0010011,    0b0000000_00000_00010_110_00010_0010011,    0b0000000_00000_00010_110_00010_0010011,    0b0000000_00000_00010_110_00010_0010011,    0b0000000_00000_00010_110_00010_0010011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Func call arg list
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_0110011,    0b0000000_00000_00000_111_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Add expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0100000_00000_00000_000_00000_0110011,    0b0000100_00000_00000_111_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Sub expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000001_00000_00000_000_00000_0110011,    0b0001000_00000_00000_111_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Mul expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000001_00000_00000_100_00000_0110011,    0b0001100_00000_00000_111_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Div expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000001_00000_00000_110_00000_0110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Mod expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_111_00000_0110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Bitand expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_110_00000_0110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Bitor expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_100_00000_0110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Bitxor expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_001_00000_0110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Lshift expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0100000_00000_00000_101_00000_0110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Rshift expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_101_00000_0110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Urshift expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Land expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Lor expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0100000_00000_00000_000_00000_0110011,    0b1010000_00000_00000_010_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00001_00000_011_00000_0010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Eq expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0100000_00000_00000_000_00000_0110011,    0b1010000_00000_00000_010_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_011_00000_0110011,    0b0000000_00001_00000_011_00000_0010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Neq expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_010_00000_0110011,    0b1010000_00000_00000_001_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Less expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_010_00000_0110011,    0b1010000_00000_00000_001_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Great expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_010_00000_0110011,    0b1010000_00000_00000_000_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00001_00000_011_00000_0010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Lesseq expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_010_00000_0110011,    0b1010000_00000_00000_000_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00001_00000_011_00000_0010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Greateq expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b1111111_11111_00000_100_00000_0010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Bitnot expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00001_00000_011_00000_0010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Lnot expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0100000_00000_00000_000_00000_0110011,    0b0010000_00000_00000_001_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Neg expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_0110111,    0b0000000_00000_00000_000_00000_0110111,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_0010011,    0b0000000_00000_00000_000_00000_0010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b1111000_00000_00000_000_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Lit expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b1100000_00000_00000_111_00000_1010011,    0b1101000_00000_00000_111_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Cast expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_010_00000_0000011,    0b0000000_00000_00000_010_00000_0000111,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Deref expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_010_00000_0100011,    0b0000000_00000_00000_010_00000_0100111,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_0110011,    0b0010000_00000_00000_000_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Assign expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_01000_000_00000_0010011,   0b0000000_00000_01000_000_00000_0010011,    0b0000000_00000_01000_000_00000_0010011,    0b0000000_00000_01000_000_00000_0010011,    0b0000000_00000_01000_000_00000_0010011,    0b0000000_00000_01000_000_00000_0010011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Decl expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_01000_000_00000_0010011,   0b0000000_00000_01000_000_00000_0010011,    0b0000000_00000_01000_000_00000_0010011,    0b0000000_00000_01000_000_00000_0010011,    0b0000000_00000_01000_000_00000_0010011,    0b0000000_00000_01000_000_00000_0010011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Id expr
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --While dummy
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b1111111_00001_00010_010_11100_0100011,   0b1111111_00001_00010_010_11100_0100011,    0b1111111_00001_00010_010_11100_0100011,    0b1111111_00001_00010_010_11100_0100011,    0b1111111_00001_00010_010_11100_0100011,    0b1111111_00001_00010_010_11100_0100011],
        [0b1111111_01000_00010_010_11000_0100011,   0b1111111_01000_00010_010_11000_0100011,    0b1111111_01000_00010_010_11000_0100011,    0b1111111_01000_00010_010_11000_0100011,    0b1111111_01000_00010_010_11000_0100011,    0b1111111_01000_00010_010_11000_0100011],
        [0b0100000_01000_00010_000_00010_0110011,   0b0100000_01000_00010_000_00010_0110011,    0b0100000_01000_00010_000_00010_0110011,    0b0100000_01000_00010_000_00010_0110011,    0b0100000_01000_00010_000_00010_0110011,    0b0100000_01000_00010_000_00010_0110011],
        [0b0000000_00010_01000_000_01000_0110011,   0b0000000_00010_01000_000_01000_0110011,    0b0000000_00010_01000_000_01000_0110011,    0b0000000_00010_01000_000_01000_0110011,    0b0000000_00010_01000_000_01000_0110011,    0b0000000_00010_01000_000_01000_0110011]
    ],  --Func decl dummy
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_0110011,    0b0000000_00000_00000_000_00000_0110011,    0b0010000_00000_00000_000_00000_1010011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1100111,   0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111,    0b0000000_00000_00000_000_00000_1100111],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Return stat
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b1110000_00000_00000_000_00000_1010011,   0b1110000_00000_00000_000_00000_1010011,    0b1110000_00000_00000_000_00000_1010011,    0b1110000_00000_00000_000_00000_1010011,    0b1110000_00000_00000_000_00000_1010011,    0b1110000_00000_00000_000_00000_1010011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Call arg float in int
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_010_00010_0100011,    0b0000000_00000_00000_010_00010_0100111,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Call arg stack
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_00000_010_00000_0100011,   0b0000000_00000_00000_010_00000_0100011,    0b0000000_00000_00000_010_00000_0100011,    0b0000000_00000_00000_010_00000_0100011,    0b0000000_00000_00000_010_00000_0100011,    0b0000000_00000_00000_010_00000_0100011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ], --Arg float in int
    [ -- Invalid                                    Void                                        Int                                         Float                                       Int_ref                                     Float_ref
        [0b0000000_00000_01000_010_00000_0100011,   0b0000000_00000_01000_010_00000_0100011,    0b0000000_00000_01000_010_00000_0100011,    0b0000000_00000_01000_010_00000_0100011,    0b0000000_00000_01000_010_00000_0100011,    0b0000000_00000_01000_010_00000_0100011],
        [0b0000000_00000_00000_010_00000_0100011,   0b0000000_00000_00000_010_00000_0100011,    0b0000000_00000_00000_010_00000_0100011,    0b0000000_00000_00000_010_00000_0100011,    0b0000000_00000_00000_010_00000_0100011,    0b0000000_00000_00000_010_00000_0100011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011],
        [0b0000000_00000_00000_000_00000_1110011,   0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011,    0b0000000_00000_00000_000_00000_1110011]
    ] --Arg stack
]

let HAS_INSTR_TABLE : [][][]bool = [
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Invalid
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Statement list
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Empty statement
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true]
    ], --Func decl
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Func arg
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Func arg list
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Expr stat
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --If stat
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --If else stat
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --While stat
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    true,     true,     false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Func call expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Func call arg
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Func call arg list
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Add expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Sub expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Mul expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Div expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Mod expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Bitand expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Bitor expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Bitxor expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Lshift expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Rshift expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Urshift expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Land expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Lor expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    true,     false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Eq expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Neq expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Less expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Great expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    true,     false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Lesseq expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    true,     false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Greateq expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Bitnot expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Lnot expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Neg expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    true,     false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Lit expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Cast expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Deref expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Assign expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Decl expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Id expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --While dummy
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true]
    ],  --Func decl dummy
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Return stat
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Call arg float in int
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Call arg stack
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Arg float in int
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ] --Arg stack
]

let NODE_GET_PARENT_ARG_IDX_LOOKUP : [][][]i8 = [
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Invalid
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Statement list
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Empty statement
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func decl
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func arg
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func arg list
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Expr stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --If stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --If else stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --While stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      1,      1,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func call expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func call arg
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func call arg list
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Add expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Sub expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Mul expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Div expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Mod expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Bitand expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Bitor expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Bitxor expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Lshift expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Rshift expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Urshift expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Land expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Lor expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      0,      2,      2,      2],
        [0,     0,      1,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Eq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [1,     1,      1,      1,      1,      1],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Neq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Less expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Great expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      0,      2,      2,      2],
        [0,     0,      1,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Lesseq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      0,      2,      2,      2],
        [0,     0,      1,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Greateq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Bitnot expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Lnot expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Neg expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [1,     1,      1,      0,      1,      1],
        [0,     0,      0,      1,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Lit expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Cast expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Deref expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [1,     1,      1,      1,      1,      1],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Assign expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Decl expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Id expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --While dummy
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [2,     2,      2,      2,      2,      2],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ],  --Func decl dummy
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Return stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Call arg float in int
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Call arg stack
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Arg float in int
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ] --Arg stack
]

let HAS_OUTPUT_TABLE : [][][]bool = [
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Invalid
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Statement list
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Empty statement
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Func decl
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Func arg
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Func arg list
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Expr stat
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --If stat
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --If else stat
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --While stat
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Func call expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,    false,     false,     false,     false,     false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Func call arg
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Func call arg list
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Add expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Sub expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Mul expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Div expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Mod expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Bitand expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Bitor expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,    false,     false,     false,     false,     false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Bitxor expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Lshift expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Rshift expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Urshift expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Land expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Lor expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    true,     false,     false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Eq expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,      true,    true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Neq expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Less expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Great expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    true,     false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Lesseq expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    true,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Greateq expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Bitnot expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Lnot expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Neg expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    true,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Lit expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Cast expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Deref expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Assign expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Decl expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Id expr
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --While dummy
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ],  --Func decl dummy
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Return stat
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Call arg float in int
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Call arg stack
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ], --Arg float in int
    [ -- Invalid  Void      Int       Float     Int_ref   Float_ref
        [true,    true,     true,     true,     true,     true],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false],
        [false,   false,    false,    false,    false,    false]
    ] --Arg stack
]

let INSTR_CONSTANT_TABLE : [][]i8 = [
    [0,0,0,0], --Invalid
    [0,0,0,0], --Statement list
    [0,0,0,0], --Empty statement
    [0,0,0,0], --Func decl
    [0,0,0,0], --Func arg
    [0,0,0,0], --Func arg list
    [0,0,0,0], --Expr stat
    [0,0,0,0], --If stat
    [0,0,0,0], --If else stat
    [0,0,0,0], --While stat
    [0,0,0,0], --Func call expr
    [0,0,0,0], --Func call arg
    [5,4,0,0], --Func call arg list
    [0,0,0,0], --Add expr
    [0,0,0,0], --Sub expr
    [0,0,0,0], --Mul expr
    [0,0,0,0], --Div expr
    [0,0,0,0], --Mod expr
    [0,0,0,0], --Bitand expr
    [0,0,0,0], --Bitor expr
    [0,0,0,0], --Bitxor expr
    [0,0,0,0], --Lshift expr
    [0,0,0,0], --Rshift expr
    [0,0,0,0], --Urshift expr
    [0,0,0,0], --Land expr
    [0,0,0,0], --Lor expr
    [0,0,0,0], --Eq expr
    [0,0,0,0], --Neq expr
    [0,0,0,0], --Less expr
    [0,0,0,0], --Great expr
    [0,0,0,0], --Lesseq expr
    [0,0,0,0], --Greateq expr
    [0,0,0,0], --Bitnot expr
    [0,0,0,0], --Lnot expr
    [0,0,0,0], --Neg expr
    [1,2,0,0], --Lit expr
    [0,0,0,0], --Cast expr
    [0,0,0,0], --Deref expr
    [0,0,0,0], --Assign expr
    [3,0,0,0], --Decl expr
    [3,0,0,0], --Id expr
    [0,0,0,0], --While dummy
    [0,0,0,0],  --Func decl dummy
    [0,0,0,0], --Return stat
    [0,0,0,0], --Call arg float in int
    [4,0,0,0], --Call arg stack
    [0,0,0,0], --Arg float in int
    [4,0,0,0] --Arg stack
]

let INSTR_JT_TABLE : [][]i8 = [
    [0,0,0,0], --Invalid
    [0,0,0,0], --Statement list
    [0,0,0,0], --Empty statement
    [0,0,0,0], --Func decl
    [0,0,0,0], --Func arg
    [0,0,0,0], --Func arg list
    [0,0,0,0], --Expr stat
    [1,0,0,0], --If stat
    [2,3,0,0], --If else stat
    [4,5,0,0], --While stat
    [7,0,0,0], --Func call expr
    [0,0,0,0], --Func call arg
    [0,0,0,0], --Func call arg list
    [0,0,0,0], --Add expr
    [0,0,0,0], --Sub expr
    [0,0,0,0], --Mul expr
    [0,0,0,0], --Div expr
    [0,0,0,0], --Mod expr
    [0,0,0,0], --Bitand expr
    [0,0,0,0], --Bitor expr
    [0,0,0,0], --Bitxor expr
    [0,0,0,0], --Lshift expr
    [0,0,0,0], --Rshift expr
    [0,0,0,0], --Urshift expr
    [0,0,0,0], --Land expr
    [0,0,0,0], --Lor expr
    [0,0,0,0], --Eq expr
    [0,0,0,0], --Neq expr
    [0,0,0,0], --Less expr
    [0,0,0,0], --Great expr
    [0,0,0,0], --Lesseq expr
    [0,0,0,0], --Greateq expr
    [0,0,0,0], --Bitnot expr
    [0,0,0,0], --Lnot expr
    [0,0,0,0], --Neg expr
    [0,0,0,0], --Lit expr
    [0,0,0,0], --Cast expr
    [0,0,0,0], --Deref expr
    [0,0,0,0], --Assign expr
    [0,0,0,0], --Decl expr
    [0,0,0,0], --Id expr
    [0,0,0,0], --While dummy
    [0,0,0,0],  --Func decl dummy
    [0,6,0,0], --Return stat
    [0,0,0,0], --Call arg float in int
    [0,0,0,0], --Call arg stack
    [0,0,0,0], --Arg float in int
    [0,0,0,0] --Arg stack
]

let GET_OUTPUT_TABLE : [][][]i8 = [
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Invalid
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Statement list
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Empty statement
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func decl
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func arg
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func arg list
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Expr stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --If stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --If else stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --While stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func call expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      1,      2,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func call arg
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Func call arg list
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Add expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Sub expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Mul expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Div expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Mod expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Bitand expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Bitor expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Bitxor expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Lshift expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Rshift expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Urshift expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Land expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Lor expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Eq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Neq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Less expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Great expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Lesseq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Greateq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Bitnot expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Lnot expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Neg expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Lit expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Cast expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Deref expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Assign expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Decl expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Id expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --While dummy
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ],  --Func decl dummy
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [4,     4,      4,      3,      4,      4],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Return stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [1,     1,      1,      1,      1,      1],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Call arg float in int
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Call arg stack
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ], --Arg float in int
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0],
        [0,     0,      0,      0,      0,      0]
    ] --Arg stack
]

let OPERAND_TABLE : [][][][]i8 = [
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Invalid
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Statement list
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Empty statement
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Func decl
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,0], [1,0],  [1,0],  [1,0],  [1,2],  [1,3]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Func arg
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Func arg list
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Expr stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,0], [1,0],  [1,0],  [1,0],  [1,0],  [1,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --If stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,0], [1,0],  [1,0],  [1,0],  [1,0],  [1,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --If else stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[4,0], [4,0],  [4,0],  [4,0],  [4,0],  [4,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --While stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Func call expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,0], [1,0],  [1,0],  [1,6],  [1,0],  [1,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Func call arg
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Func call arg list
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Add expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Sub expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Mul expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Div expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Mod expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Bitand expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Bitor expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Bitxor expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Lshift expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Rshift expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Urshift expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Land expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Lor expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [7,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Eq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,7],  [7,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Neq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Less expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[5,5], [5,5],  [5,5],  [5,5],  [5,5],  [5,5]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Great expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [5,5],  [1,1],  [0,0],  [0,0]],
        [[0,0], [0,0],  [7,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Lesseq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [1,1],  [5,5],  [0,0],  [0,0]],
        [[0,0], [0,0],  [7,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Greateq expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Bitnot expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Lnot expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Neg expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[7,0], [7,0],  [7,0],  [7,0],  [7,0],  [7,0]],
        [[0,0], [0,0],  [0,0],  [7,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Lit expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,0], [1,0],  [1,0],  [1,0],  [1,0],  [1,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Cast expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,0], [1,0],  [1,0],  [1,0],  [1,0],  [1,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Deref expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,1], [1,1],  [1,1],  [1,1],  [1,1],  [1,1]],
        [[4,0], [4,0],  [4,0],  [4,4],  [4,0],  [4,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Assign expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Decl expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Id expr
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --While dummy
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ],  --Func decl dummy
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [1,0],  [1,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Return stat
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,0], [1,0],  [1,0],  [1,0],  [1,0],  [1,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Call arg float in int
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[6,0], [6,0],  [6,0],  [6,0],  [6,0],  [6,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Call arg stack
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[1,2], [1,2],  [1,2],  [1,2],  [1,2],  [1,2]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ], --Arg float in int
    [ -- Inval  Void    Int     Float   Int_ref Float_ref
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[1,7], [1,7],  [1,7],  [1,7],  [1,7],  [1,7]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]],
        [[0,0], [0,0],  [0,0],  [0,0],  [0,0],  [0,0]]
    ] --Arg stack
]

let node_instr (node_type: NodeType) (data_type: DataType) (instr_offset: i64) : u32 =
    INSTR_TABLE[node_type, instr_offset, data_type]

let has_instr (node_type: NodeType) (data_type: DataType) (instr_offset: i64) : bool =
    HAS_INSTR_TABLE[node_type, instr_offset, data_type]

let node_has_return (_ : NodeType) (data_type : DataType) : bool =
    !(data_type == datatype_void || data_type == node_type_invalid)

let parent_arg_idx (node: Node) : i64 =
    i64.i32 node.parent * PARENT_IDX_PER_NODE + i64.i32 node.child_idx

let node_get_parent_arg_idx_sub (node: Node) (instr_offset: i64) : i64 =
    let calc_type = NODE_GET_PARENT_ARG_IDX_LOOKUP[node.node_type, instr_offset, node.resulting_type] in
    if calc_type == 1 then
        parent_arg_idx node
    else if calc_type == 2 then
        if node_has_return node.node_type node.resulting_type then
            parent_arg_idx node
        else
            -1
    else
        -1

let node_get_parent_arg_idx (nodes: []Node) (node: Node) (instr_offset: i64) : i64 =
    if node.parent == INVALID_NODE_IDX then
        node_get_parent_arg_idx_sub node instr_offset
    else
        let parent = nodes[node.parent]
        in
        if node.child_idx > 0 && (parent.node_type == node_type_if_stat || parent.node_type == node_type_if_else_stat) then
            parent_arg_idx node
        else if (node.child_idx == 0 || node.child_idx == 2) && (parent.node_type == node_type_while_stat) then
            parent_arg_idx node
        else
            node_get_parent_arg_idx_sub node instr_offset

let register (instr_no: i64) =
    instr_no + 64

let node_get_instr_arg (node_id: i64) (node: Node) (registers: []i64) (arg_no: i64) (instr_no: i64) (instr_offset: i64) : i64 =
    let calc_type = OPERAND_TABLE[node.node_type, instr_offset, node.resulting_type, arg_no] in
    if calc_type == 1 then
        registers[node_id * PARENT_IDX_PER_NODE + arg_no]
    else if calc_type == 2 then
        i64.u32 node.node_data + 10
    else if calc_type == 3 then
        i64.u32 node.node_data + 42
    else if calc_type == 4 then
        registers[node_id * PARENT_IDX_PER_NODE + 1]
    else if calc_type == 5 then
        registers[node_id * PARENT_IDX_PER_NODE + 1 - arg_no]
    else if calc_type == 6 then
        registers[node_id * PARENT_IDX_PER_NODE]
    else if calc_type == 7 then
        register (instr_no - 1)
    else
        0

let node_has_output (nodes: []Node) (node: Node) (instr_offset: i64) : bool =
    (node_get_parent_arg_idx nodes node instr_offset) != -1 || HAS_OUTPUT_TABLE[node.node_type, instr_offset, node.resulting_type]

-- let make_branch_constant (node_id: i64) (registers: []i64) (delta: i64) (instr_loc: i64) (idx: i64) : u32 =
--     let offset = (registers[node_id * PARENT_IDX_PER_NODE + idx] + delta - instr_loc) * 4
--     let low_offset = (((offset >> 1) & 0xF) << 1) | ((offset >> 11) & 0x1)
--     let high_offset = ((offset >> 5) & 0x1F) | (((offset >> 12) & 0x1) << 5)
--     in
--     u32.i64 ((low_offset << 7) | (high_offset << 25))

-- let make_jump_constant (node_id: i64) (registers: []i64) (instr_loc: i64) (idx: i64): u32 =
--     let offset = (registers[node_id * PARENT_IDX_PER_NODE + idx] - instr_loc) * 4
--     in
--     u32.i64 (
--         (((offset >> 12) & 0xFF) << 12) |
--         (((offset >> 11) & 0x1) << 20) |
--         (((offset >> 1) & 0x3FF) << 21) |
--         (((offset >> 20) & 0x1) << 31)
--     )

let signextend(x: u32) =
    let signed_x = i32.u32 x in
    u32.i32 (signed_x << 20 >> 20)
    
let instr_constant (node: Node) (instr_offset: i64) : u32 =
    let calc_type = INSTR_CONSTANT_TABLE[node.node_type, instr_offset] in
    if calc_type == 1 then
        node.node_data - (signextend (node.node_data & 0xFFF)) & 0xFFFFF000
    else if calc_type == 2 then
        (node.node_data & 0xFFF) << 20
    else if calc_type == 3 then
        (-(4 * (node.node_data + 2))) << 20
    else if calc_type == 4 then
        (4 * node.node_data) << 20
    else if calc_type == 5 then
        (-(4 * node.node_data)) << 20
    else
        0

let instr_jt (node: Node) 
 (node_id: i64) (instr_offset: i64) (registers: []i64) (func_starts: []u32) (func_ends: []u32): i64 =
    let calc_type = INSTR_JT_TABLE[node.node_type, instr_offset] in
    if calc_type == 1 then
        registers[node_id * PARENT_IDX_PER_NODE + 1]
    else if calc_type == 2 then
        registers[node_id * PARENT_IDX_PER_NODE + 1] + 1
    else if calc_type == 3 then
        registers[node_id * PARENT_IDX_PER_NODE + 2]
    else if calc_type == 4 then
        registers[node_id * PARENT_IDX_PER_NODE + 2] + 1
    else if calc_type == 5 then
        registers[node_id * PARENT_IDX_PER_NODE]
    else if calc_type == 6 then
        i64.u32 func_ends[i64.u32 node.node_data] - 6
    else if calc_type == 7 then
        i64.u32 func_starts[i64.u32 node.node_data]
    else
        0

let get_instr_loc (node: Node) (nodes: []Node) (node_id: i64) (instr_no: i64) (instr_offset: i64) (registers: []i64) =
    if instr_offset == 1 && (node.node_type == node_type_if_else_stat) then
        registers[node_id * PARENT_IDX_PER_NODE + 1]
    else if instr_offset == 1 && node.node_type == node_type_while_stat then
        registers[node_id * PARENT_IDX_PER_NODE + 2]
    else if (instr_offset >= 2 && node.node_type == node_type_func_decl_dummy) || node.node_type == node_type_func_decl then
        instr_no + 2
    else if instr_offset == 1 && (node.node_type == node_type_func_call_arg_list) then
        if node_id == 0 then
            instr_no + 2
        else
            let prev_node = nodes[node_id - 1]
            in
            instr_no + 2 + (if prev_node.node_type == node_type_func_call_arg || prev_node.node_type == node_type_func_call_arg_float_in_int || prev_node.node_type == node_type_func_call_arg_stack then
                i64.i32 prev_node.child_idx
            else
                0
            )
    else
        instr_no

let get_data_prop_value [tree_size] (tree: Tree[tree_size]) (node: Node) (rd: i64) (instr_no: i64) =
    if node.parent == INVALID_NODE_IDX then
        rd
    else
        let parent_type = tree.nodes[node.parent].node_type
        let instr_no = instr_no + i64.u32 NODE_COUNT_TABLE[node.node_type, node.resulting_type]
        in
        if parent_type == node_type_if_stat || parent_type == node_type_if_else_stat then
            if node.child_idx == 1 || node.child_idx == 2 then
                instr_no
            else
                rd
        else if parent_type == node_type_while_stat then
            if node.child_idx == 0 || node.child_idx == 2 then
                instr_no
            else
                rd
        else
            rd

let get_output_register [tree_size] (tree: Tree[tree_size]) (node: Node) (instr_no: i64) (instr_offset: i64) =
    let calc_type = GET_OUTPUT_TABLE[node.node_type, instr_offset, node.resulting_type] in
    if calc_type == 1 then
        i64.u32 node.node_data + 10
    else if calc_type == 2 then
        i64.u32 node.node_data + 42
    else if calc_type == 3 then
        32
    else if calc_type == 4 then
        10
    else
        if node_has_output tree.nodes node instr_offset then register instr_no else 0

let get_node_instr [tree_size] (tree: Tree[tree_size]) (node: Node) (instr_no: i64) (node_index: i64) (registers: []i64) (func_starts: []u32) (func_ends: []u32) (instr_offset: i64): (i64, i64, Instr, i64) =
    let node_type = node.node_type
    let data_type = node.resulting_type
    let rd = get_output_register tree node instr_no instr_offset
    let instr_loc = get_instr_loc node tree.nodes node_index instr_no instr_offset registers
    in
        (
            instr_loc,
            node_get_parent_arg_idx tree.nodes node instr_offset,
            {
                instr = node_instr node_type data_type instr_offset | instr_constant node instr_offset,
                rd = rd,
                rs1 = node_get_instr_arg node_index node registers 0 instr_no instr_offset,
                rs2 = node_get_instr_arg node_index node registers 1 instr_no instr_offset,
                jt = u32.i64 (instr_jt node node_index instr_offset registers func_starts func_ends)
            },
            get_data_prop_value tree node rd instr_no
        )

let compile_node [tree_size] (tree: Tree[tree_size]) (registers: []i64) (instr_offset: [tree_size]i64) (func_starts: []u32) (func_ends: []u32)
        (node_index: i64) =
    let node = tree.nodes[node_index]
    let node_instr = instr_offset[node_index]
    in
    iota 4i64 |>
        map (\i ->
                if has_instr node.node_type node.resulting_type i then
                    get_node_instr tree node (node_instr+i) node_index registers func_starts func_ends i
                else if i == 0 then
                    (-1, node_get_parent_arg_idx tree.nodes node 0, EMPTY_INSTR, get_data_prop_value tree node 0 node_instr)
                else
                    (-1, -1, EMPTY_INSTR, 0)
            )
        -- [
        --     if has_instr node.node_type node.resulting_type 0 then
        --         get_node_instr tree node node_instr node_index registers symtab func_starts func_ends 0
        --     else
        --         (-1, node_get_parent_arg_idx tree.nodes node 0, EMPTY_INSTR, get_data_prop_value tree node 0 node_instr)
        --     ,
        --     if has_instr node.node_type node.resulting_type 1 then get_node_instr tree node (node_instr+1) node_index registers symtab func_starts func_ends 1 else (-1, -1, EMPTY_INSTR, 0),
        --     if has_instr node.node_type node.resulting_type 2 then get_node_instr tree node (node_instr+2) node_index registers symtab func_starts func_ends 2 else (-1, -1, EMPTY_INSTR, 0),
        --     if has_instr node.node_type node.resulting_type 3 then get_node_instr tree node (node_instr+3) node_index registers symtab func_starts func_ends 3 else (-1, -1, EMPTY_INSTR, 0)
        -- ]

let check_idx_node_depth [tree_size] (tree: Tree[tree_size]) (depth: i32) (i: i64) =
    is_level tree.nodes[i] depth

let bit_width (x: i32): i32 =
    i32.num_bits - (i32.clz x)

let compile_tree [tree_size] [num_funcs] (tree: Tree[tree_size]) (instr_offset: [tree_size]i64) (max_instrs: i64) (func_starts: [num_funcs]u32) (func_ends: [num_funcs]u32) =
    let idx_array = iota tree_size |> radix_sort (bit_width tree.max_depth) (\bit idx -> i32.get_bit bit tree.nodes[idx].depth)
    let depth_starts = iota tree_size |> filter (\i -> i == 0 || tree.nodes[idx_array[i]].depth != tree.nodes[idx_array[i-1]].depth)
    let initial_registers = replicate (tree_size * PARENT_IDX_PER_NODE) 0i64
    let initial_instr = replicate max_instrs EMPTY_INSTR
    let (instr_result, _) =
        loop (data, registers) = (initial_instr, initial_registers) for i < tree.max_depth+1 do
            let j = tree.max_depth-i
            let start = depth_starts[j]
            let end = if j == tree.max_depth then tree_size else depth_starts[j + 1]
            let (idx, parent_idx, instrs, new_regs) =
                idx_array[start:end] |>
                map (compile_node tree (copy registers) instr_offset func_starts func_ends) |>
                flatten |>
                unzip4
            in
            (
                scatter data idx instrs,
                scatter registers parent_idx new_regs
            )
    in
        instr_result
